"""
P√°gina de an√°lise de gastos com visualiza√ß√µes interativas.
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np

def render_gastos_page():
    """Renderiza a p√°gina de an√°lise de gastos."""
    
    st.markdown("## üìà An√°lise de Gastos P√∫blicos")
    st.markdown("Explore e analise os gastos do governo federal com visualiza√ß√µes interativas.")
    
    # Filtros
    st.markdown("### üîç Filtros")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        ano = st.selectbox(
            "Ano",
            options=[2024, 2023, 2022, 2021, 2020],
            index=0
        )
    
    with col2:
        mes = st.selectbox(
            "M√™s",
            options=["Todos"] + [f"{i:02d}" for i in range(1, 13)],
            index=0
        )
    
    with col3:
        tipo_despesa = st.selectbox(
            "Tipo de Despesa",
            options=["Todas", "Pessoal", "Custeio", "Investimento", "Invers√µes"],
            index=0
        )
    
    with col4:
        orgao_filter = st.text_input("Filtrar por √ìrg√£o", placeholder="Digite o nome...")
    
    st.markdown("---")
    
    # KPIs
    st.markdown("### üí∞ Indicadores Principais")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Total Gasto",
            f"R$ {45.8:.1f} Bi",
            f"‚Üë {12.3:.1f}% vs ano anterior"
        )
    
    with col2:
        st.metric(
            "M√©dia Mensal",
            f"R$ {3.82:.2f} Bi",
            f"‚Üë {8.5:.1f}% vs m√™s anterior"
        )
    
    with col3:
        st.metric(
            "Maior Gasto",
            "Min. Sa√∫de",
            "R$ 12.4 Bi"
        )
    
    with col4:
        st.metric(
            "Execu√ß√£o Or√ßament√°ria",
            "87.3%",
            "‚Üë 2.1% vs meta"
        )
    
    st.markdown("---")
    
    # Visualiza√ß√µes principais
    tab1, tab2, tab3, tab4 = st.tabs(["üìä Por √ìrg√£o", "üìÖ Temporal", "üóÇÔ∏è Por Categoria", "üó∫Ô∏è Geogr√°fico"])
    
    with tab1:
        render_gastos_por_orgao()
    
    with tab2:
        render_analise_temporal()
    
    with tab3:
        render_gastos_por_categoria()
    
    with tab4:
        render_mapa_gastos()

def render_gastos_por_orgao():
    """Renderiza an√°lise de gastos por √≥rg√£o."""
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Gr√°fico de barras horizontais
        orgaos = [
            "Minist√©rio da Sa√∫de",
            "Minist√©rio da Educa√ß√£o", 
            "Minist√©rio da Defesa",
            "Minist√©rio da Infraestrutura",
            "Minist√©rio do Desenvolvimento Social",
            "Minist√©rio da Economia",
            "Minist√©rio da Justi√ßa",
            "Minist√©rio da Agricultura",
            "Minist√©rio do Meio Ambiente",
            "Outros"
        ]
        
        valores = [125.4, 98.7, 76.3, 54.2, 43.1, 38.9, 28.7, 24.3, 18.9, 67.5]
        
        df = pd.DataFrame({
            '√ìrg√£o': orgaos,
            'Valor (Bilh√µes)': valores
        })
        
        fig = px.bar(
            df.sort_values('Valor (Bilh√µes)'),
            x='Valor (Bilh√µes)',
            y='√ìrg√£o',
            orientation='h',
            title="Top 10 √ìrg√£os por Volume de Gastos",
            color='Valor (Bilh√µes)',
            color_continuous_scale='Viridis',
            text='Valor (Bilh√µes)'
        )
        
        fig.update_traces(texttemplate='R$ %{text:.1f}B', textposition='outside')
        fig.update_layout(
            height=500,
            showlegend=False,
            coloraxis_showscale=False
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Estat√≠sticas do √≥rg√£o selecionado
        st.markdown("#### üìä Detalhes do √ìrg√£o")
        
        orgao_selecionado = st.selectbox(
            "Selecione um √≥rg√£o",
            options=orgaos,
            label_visibility="collapsed"
        )
        
        # M√©tricas do √≥rg√£o
        st.metric("Total Gasto", f"R$ {125.4:.1f} Bi")
        st.metric("Varia√ß√£o Anual", "‚Üë 15.3%", delta_color="normal")
        st.metric("% do Total", "27.4%")
        st.metric("Contratos Ativos", "1.234")
        
        # Mini gr√°fico de evolu√ß√£o
        st.markdown("##### Evolu√ß√£o Mensal")
        meses = list(range(1, 13))
        valores_mensais = np.random.uniform(8, 12, 12)
        
        fig_mini = go.Figure()
        fig_mini.add_trace(go.Scatter(
            x=meses,
            y=valores_mensais,
            mode='lines+markers',
            fill='tozeroy',
            line=dict(color='#1f77b4', width=2)
        ))
        
        fig_mini.update_layout(
            height=200,
            margin=dict(t=10, b=0, l=0, r=0),
            showlegend=False,
            xaxis=dict(title="M√™s"),
            yaxis=dict(title="Bilh√µes (R$)")
        )
        
        st.plotly_chart(fig_mini, use_container_width=True)

def render_analise_temporal():
    """Renderiza an√°lise temporal dos gastos."""
    
    # Seletor de per√≠odo
    col1, col2 = st.columns([3, 1])
    
    with col1:
        periodo = st.radio(
            "Per√≠odo de An√°lise",
            options=["√öltimos 12 meses", "√öltimo ano", "√öltimos 5 anos"],
            horizontal=True
        )
    
    with col2:
        tipo_grafico = st.selectbox(
            "Tipo de Gr√°fico",
            options=["Linha", "√Årea", "Barras"]
        )
    
    # Gerar dados de exemplo
    if periodo == "√öltimos 12 meses":
        dates = pd.date_range(end=datetime.now(), periods=12, freq='M')
        valores = np.random.uniform(40, 60, 12)
    elif periodo == "√öltimo ano":
        dates = pd.date_range(end=datetime.now(), periods=365, freq='D')
        valores = np.random.uniform(1, 3, 365)
    else:
        dates = pd.date_range(end=datetime.now(), periods=60, freq='M')
        valores = np.random.uniform(35, 65, 60)
    
    df_temporal = pd.DataFrame({
        'Data': dates,
        'Valor': valores
    })
    
    # Criar gr√°fico baseado no tipo selecionado
    if tipo_grafico == "Linha":
        fig = px.line(
            df_temporal,
            x='Data',
            y='Valor',
            title="Evolu√ß√£o dos Gastos ao Longo do Tempo"
        )
    elif tipo_grafico == "√Årea":
        fig = px.area(
            df_temporal,
            x='Data',
            y='Valor',
            title="Evolu√ß√£o dos Gastos ao Longo do Tempo"
        )
    else:
        fig = px.bar(
            df_temporal,
            x='Data',
            y='Valor',
            title="Evolu√ß√£o dos Gastos ao Longo do Tempo"
        )
    
    fig.update_layout(
        height=400,
        xaxis_title="",
        yaxis_title="Valor (Bilh√µes R$)",
        hovermode='x unified'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # An√°lise de tend√™ncia
    st.markdown("#### üìà An√°lise de Tend√™ncia")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info("**Tend√™ncia**: Crescente")
        st.caption("Taxa de crescimento: 2.3% ao m√™s")
    
    with col2:
        st.warning("**Sazonalidade**: Alta em Dezembro")
        st.caption("Pico m√©dio: 18% acima da m√©dia")
    
    with col3:
        st.success("**Previs√£o**: R$ 58.2 Bi")
        st.caption("Pr√≥ximo m√™s (95% confian√ßa)")

def render_gastos_por_categoria():
    """Renderiza gastos por categoria."""
    
    # Gr√°ficos de composi√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        # Donut chart por tipo de despesa
        categorias = ["Pessoal", "Custeio", "Investimento", "Invers√µes", "Amortiza√ß√£o"]
        valores = [234.5, 123.4, 45.6, 23.4, 12.3]
        
        fig = go.Figure(data=[go.Pie(
            labels=categorias,
            values=valores,
            hole=.4
        )])
        
        fig.update_layout(
            title="Distribui√ß√£o por Tipo de Despesa",
            height=400,
            annotations=[dict(text='2024', x=0.5, y=0.5, font_size=20, showarrow=False)]
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Treemap por fun√ß√£o
        funcoes = ["Sa√∫de", "Educa√ß√£o", "Previd√™ncia", "Defesa", "Assist√™ncia", "Transporte"]
        valores_funcao = [125, 98, 87, 76, 54, 43]
        
        fig = px.treemap(
            names=funcoes,
            parents=[""] * len(funcoes),
            values=valores_funcao,
            title="Gastos por Fun√ß√£o de Governo"
        )
        
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    # Tabela detalhada
    st.markdown("#### üìã Detalhamento por Categoria")
    
    df_detalhes = pd.DataFrame({
        'Categoria': categorias * 2,
        'Subcategoria': ['Ativos', 'Inativos', 'Material', 'Servi√ßos', 'Obras', 'Equipamentos', 
                        'Financeiras', 'Imobili√°rias', 'D√≠vida Interna', 'D√≠vida Externa'],
        'Valor (Mi)': np.random.uniform(1000, 50000, 10),
        'Execu√ß√£o (%)': np.random.uniform(70, 100, 10),
        'Varia√ß√£o (%)': np.random.uniform(-10, 20, 10)
    })
    
    st.dataframe(
        df_detalhes.style.format({
            'Valor (Mi)': 'R$ {:,.0f}',
            'Execu√ß√£o (%)': '{:.1f}%',
            'Varia√ß√£o (%)': '{:+.1f}%'
        }).background_gradient(subset=['Execu√ß√£o (%)']),
        use_container_width=True,
        hide_index=True
    )

def render_mapa_gastos():
    """Renderiza mapa de gastos por regi√£o."""
    
    st.markdown("#### üó∫Ô∏è Distribui√ß√£o Geogr√°fica dos Gastos")
    
    # Dados por estado (mockados)
    estados_br = {
        'Estado': ['SP', 'RJ', 'MG', 'BA', 'PR', 'RS', 'PE', 'CE', 'PA', 'MA'],
        'Valor': [45.6, 32.4, 28.9, 21.3, 18.7, 17.5, 15.4, 13.2, 11.8, 9.7],
        'Per Capita': [989, 1876, 1367, 1432, 1654, 1543, 1621, 1456, 1378, 1402]
    }
    
    df_estados = pd.DataFrame(estados_br)
    
    # Visualiza√ß√£o
    view_type = st.radio(
        "Visualizar por:",
        options=["Valor Total", "Per Capita"],
        horizontal=True
    )
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Gr√°fico de barras por estado
        y_col = 'Valor' if view_type == "Valor Total" else 'Per Capita'
        y_title = 'Bilh√µes (R$)' if view_type == "Valor Total" else 'R$ per capita'
        
        fig = px.bar(
            df_estados.sort_values(y_col, ascending=True),
            x=y_col,
            y='Estado',
            orientation='h',
            title=f"Gastos por Estado - {view_type}",
            color=y_col,
            color_continuous_scale='Blues'
        )
        
        fig.update_layout(
            height=400,
            showlegend=False,
            coloraxis_showscale=False,
            xaxis_title=y_title
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Estat√≠sticas regionais
        st.markdown("##### üìä Resumo Regional")
        
        regioes = {
            'Sudeste': 107.9,
            'Nordeste': 78.4,
            'Sul': 53.7,
            'Norte': 32.8,
            'Centro-Oeste': 24.6
        }
        
        for regiao, valor in regioes.items():
            st.metric(regiao, f"R$ {valor:.1f} Bi")
    
    # Insights
    st.info("üí° **Insight**: A regi√£o Sudeste concentra 36% dos gastos totais, mas tem o 3¬∫ maior gasto per capita.")